@page "/media"
@inject HttpClient ApiClient
@using Ljbc1994.Blazor.IntersectionObserver.Components
@using Ljbc1994.Blazor.IntersectionObserver

<div class="images-container" style="display: flex; flex-wrap: wrap">
    @if (items != null){
        @for (var i = 0; i < items.Count(); i ++)
        {
            var item = items[i];
            
            <img class="content-item" style=@($"height: {height}px;") src="@item.Thumb.URL"  />
        }
       <IntersectionObserve>
        <div @ref="context.Ref.Current">
            @{
                if (context.IsIntersecting) FetchNewItems();
                }
        </div>
    </IntersectionObserve>
    }
    else
    {
        var rand = new Random();

        @for (var i = 0; i < emptyItems; i++)
        {
            var realWidth = baseWidth + rand.Next(-3, 3)*randomStep;

            <div class="content-item" style=@($"width: {realWidth}px; height: {height}px") />
        }
    }
</div>

@code {
    ElementReference lastItem;
    
    const int height = 200;
    const int baseWidth = 250;
    const int randomStep = 50;
    const int emptyItems = 100;

    class MediaItem
    {
        /*
        type MediaItem struct {
        UUID string `json:"uuid"`
        ThumbURL string `json:"thumb_url,omitempty"`
        DetailURL string `json:"detail_url,omitempty"`
        OriginalURL string `json:"original_url,omitempty"`
        Thumb *MediaItemInfo `json:"thumb,omitempty"`
        Detail *MediaItemInfo `json:"detail,omitempty"`
        Original *MediaItemInfo `json:"original,omitempty"`
        }
        */
        public MediaItemInfo Thumb {get;set;}

    }

    class MediaItemInfo
    {
        public string URL {get; set;}
        public uint Width {get; set;}
        public uint Height {get; set;}
    }

    class MediaResp
    {
        public MediaItem[] Media {get;set;}
        public string Cursor {get;set;}
    }

    MediaItem[] items;

    protected override async Task OnInitializedAsync()
    {
        var opt = new System.Text.Json.JsonSerializerOptions{PropertyNameCaseInsensitive = true};
        var resp = await ApiClient.GetFromJsonAsync<MediaResp>("/v2/media", opt);

            Console.WriteLine($"resp length: {resp?.Media?.Length}");

        items = resp?.Media;

    }

    private void FetchNewItems() {
        Console.WriteLine("FetchNewItems");
        
    }

    IntersectionObserve Observe;
    
}
